//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entity_Overtime
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OvertimeEntities : DbContext
    {
        public OvertimeEntities()
            : base("name=OvertimeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployeesMaster> EmployeesMasters { get; set; }
        public virtual DbSet<WorkingTable> WorkingTables { get; set; }
        public virtual DbSet<AuthenticationCode> AuthenticationCodes { get; set; }
        public virtual DbSet<DatabaseSetting> DatabaseSettings { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ReportViewRole> ReportViewRoles { get; set; }
        public virtual DbSet<RequestStatu> RequestStatus { get; set; }
        public virtual DbSet<WorkOrganization> WorkOrganizations { get; set; }
        public virtual DbSet<ExternComunicationHandler> ExternComunicationHandlers { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<OvertimeReason> OvertimeReasons { get; set; }
        public virtual DbSet<Messaging> Messagings { get; set; }
        public virtual DbSet<Messaging1> Messaging1 { get; set; }
        public virtual DbSet<WorkingTable1> WorkingTable1 { get; set; }
    
        public virtual int ChangeRequestStatus(Nullable<int> requestID, Nullable<int> requestStatus, Nullable<int> time, string employeeID, ObjectParameter returnInt, ObjectParameter returnText, ObjectParameter returnEmployeeID, ObjectParameter returnManagerID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var requestStatusParameter = requestStatus.HasValue ?
                new ObjectParameter("RequestStatus", requestStatus) :
                new ObjectParameter("RequestStatus", typeof(int));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(int));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeRequestStatus", requestIDParameter, requestStatusParameter, timeParameter, employeeIDParameter, returnInt, returnText, returnEmployeeID, returnManagerID);
        }
    
        public virtual int CreateOverTimeRequest(string requestor_EmployeeID, string requestor_Reason, Nullable<int> requestor_For_WO_Project_ID, Nullable<System.DateTime> requestor_StartTime, Nullable<System.DateTime> requestor_EndTime, ObjectParameter returnInt, ObjectParameter returnText, ObjectParameter returnManagerID, ObjectParameter returnEmployeeID)
        {
            var requestor_EmployeeIDParameter = requestor_EmployeeID != null ?
                new ObjectParameter("Requestor_EmployeeID", requestor_EmployeeID) :
                new ObjectParameter("Requestor_EmployeeID", typeof(string));
    
            var requestor_ReasonParameter = requestor_Reason != null ?
                new ObjectParameter("Requestor_Reason", requestor_Reason) :
                new ObjectParameter("Requestor_Reason", typeof(string));
    
            var requestor_For_WO_Project_IDParameter = requestor_For_WO_Project_ID.HasValue ?
                new ObjectParameter("Requestor_For_WO_Project_ID", requestor_For_WO_Project_ID) :
                new ObjectParameter("Requestor_For_WO_Project_ID", typeof(int));
    
            var requestor_StartTimeParameter = requestor_StartTime.HasValue ?
                new ObjectParameter("Requestor_StartTime", requestor_StartTime) :
                new ObjectParameter("Requestor_StartTime", typeof(System.DateTime));
    
            var requestor_EndTimeParameter = requestor_EndTime.HasValue ?
                new ObjectParameter("Requestor_EndTime", requestor_EndTime) :
                new ObjectParameter("Requestor_EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateOverTimeRequest", requestor_EmployeeIDParameter, requestor_ReasonParameter, requestor_For_WO_Project_IDParameter, requestor_StartTimeParameter, requestor_EndTimeParameter, returnInt, returnText, returnManagerID, returnEmployeeID);
        }
    
        public virtual int GenerateMessage(Nullable<int> requestID, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateMessage", requestIDParameter, returnInt, returnText);
        }
    
        public virtual int GenerateMessage_To_Employee(Nullable<int> requestID, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateMessage_To_Employee", requestIDParameter, returnInt, returnText);
        }
    
        public virtual int Login(string actualUser, Nullable<int> loginCode, ObjectParameter loged_ApiKey, ObjectParameter loged_EmployeeName, ObjectParameter loged_EmployeeID, string applicationName, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var loginCodeParameter = loginCode.HasValue ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(int));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Login", actualUserParameter, loginCodeParameter, loged_ApiKey, loged_EmployeeName, loged_EmployeeID, applicationNameParameter, returnInt, returnText);
        }
    
        public virtual int PreLogin(string actualUser, string employeeID, string applicationName, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PreLogin", actualUserParameter, employeeIDParameter, applicationNameParameter, returnInt, returnText);
        }
    
        public virtual int Send_EMAIL(Nullable<int> requestID, string reciever, string messageText, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var recieverParameter = reciever != null ?
                new ObjectParameter("Reciever", reciever) :
                new ObjectParameter("Reciever", typeof(string));
    
            var messageTextParameter = messageText != null ?
                new ObjectParameter("MessageText", messageText) :
                new ObjectParameter("MessageText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Send_EMAIL", requestIDParameter, recieverParameter, messageTextParameter, returnInt, returnText);
        }
    
        public virtual int Send_SMS(Nullable<int> requestID, string reciever, string messageText, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var recieverParameter = reciever != null ?
                new ObjectParameter("Reciever", reciever) :
                new ObjectParameter("Reciever", typeof(string));
    
            var messageTextParameter = messageText != null ?
                new ObjectParameter("MessageText", messageText) :
                new ObjectParameter("MessageText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Send_SMS", requestIDParameter, recieverParameter, messageTextParameter, returnInt, returnText);
        }
    
        public virtual int SendEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendEmail");
        }
    
        public virtual ObjectResult<PendingApprovalsForMyApprove_Result> PendingApprovalsForMyApprove(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingApprovalsForMyApprove_Result>("PendingApprovalsForMyApprove", employeeIDParameter);
        }
    
        public virtual ObjectResult<PendingMyOvertimeRequests_Result> PendingMyOvertimeRequests(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingMyOvertimeRequests_Result>("PendingMyOvertimeRequests", employeeIDParameter);
        }
    
        public virtual int ErrorLog_Insert(string errorText, string errorProcedure, Nullable<int> errorScript, string errorUser, string errorNode, string applicationName)
        {
            var errorTextParameter = errorText != null ?
                new ObjectParameter("ErrorText", errorText) :
                new ObjectParameter("ErrorText", typeof(string));
    
            var errorProcedureParameter = errorProcedure != null ?
                new ObjectParameter("ErrorProcedure", errorProcedure) :
                new ObjectParameter("ErrorProcedure", typeof(string));
    
            var errorScriptParameter = errorScript.HasValue ?
                new ObjectParameter("ErrorScript", errorScript) :
                new ObjectParameter("ErrorScript", typeof(int));
    
            var errorUserParameter = errorUser != null ?
                new ObjectParameter("ErrorUser", errorUser) :
                new ObjectParameter("ErrorUser", typeof(string));
    
            var errorNodeParameter = errorNode != null ?
                new ObjectParameter("ErrorNode", errorNode) :
                new ObjectParameter("ErrorNode", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ErrorLog_Insert", errorTextParameter, errorProcedureParameter, errorScriptParameter, errorUserParameter, errorNodeParameter, applicationNameParameter);
        }
    
        public virtual int EventLog_Insert(string eventText, string eventProcedure, Nullable<int> eventScript, string eventUser, string eventNode, string applicationName)
        {
            var eventTextParameter = eventText != null ?
                new ObjectParameter("EventText", eventText) :
                new ObjectParameter("EventText", typeof(string));
    
            var eventProcedureParameter = eventProcedure != null ?
                new ObjectParameter("EventProcedure", eventProcedure) :
                new ObjectParameter("EventProcedure", typeof(string));
    
            var eventScriptParameter = eventScript.HasValue ?
                new ObjectParameter("EventScript", eventScript) :
                new ObjectParameter("EventScript", typeof(int));
    
            var eventUserParameter = eventUser != null ?
                new ObjectParameter("EventUser", eventUser) :
                new ObjectParameter("EventUser", typeof(string));
    
            var eventNodeParameter = eventNode != null ?
                new ObjectParameter("EventNode", eventNode) :
                new ObjectParameter("EventNode", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EventLog_Insert", eventTextParameter, eventProcedureParameter, eventScriptParameter, eventUserParameter, eventNodeParameter, applicationNameParameter);
        }
    
        public virtual ObjectResult<DepartmentAprrovalsFromHistory_Result1> DepartmentAprrovalsFromHistory(string employeeID, string departmentName, Nullable<int> rows, Nullable<int> pages, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var rowsParameter = rows.HasValue ?
                new ObjectParameter("Rows", rows) :
                new ObjectParameter("Rows", typeof(int));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("Pages", pages) :
                new ObjectParameter("Pages", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartmentAprrovalsFromHistory_Result1>("DepartmentAprrovalsFromHistory", employeeIDParameter, departmentNameParameter, rowsParameter, pagesParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<MyOvertimesRequestsFromHistory_Result> MyOvertimesRequestsFromHistory(string employeeID, Nullable<System.DateTime> startDate, Nullable<int> rows, Nullable<int> pages, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var rowsParameter = rows.HasValue ?
                new ObjectParameter("Rows", rows) :
                new ObjectParameter("Rows", typeof(int));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("pages", pages) :
                new ObjectParameter("pages", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MyOvertimesRequestsFromHistory_Result>("MyOvertimesRequestsFromHistory", employeeIDParameter, startDateParameter, rowsParameter, pagesParameter, endDateParameter);
        }
    
        public virtual ObjectResult<WOAprrovalsFromHistory_Result> WOAprrovalsFromHistory(string employeeID, Nullable<int> rows, Nullable<int> pages, string wO_Name, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var rowsParameter = rows.HasValue ?
                new ObjectParameter("Rows", rows) :
                new ObjectParameter("Rows", typeof(int));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("Pages", pages) :
                new ObjectParameter("Pages", typeof(int));
    
            var wO_NameParameter = wO_Name != null ?
                new ObjectParameter("WO_Name", wO_Name) :
                new ObjectParameter("WO_Name", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WOAprrovalsFromHistory_Result>("WOAprrovalsFromHistory", employeeIDParameter, rowsParameter, pagesParameter, wO_NameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetAllSessions_Result> GetAllSessions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSessions_Result>("GetAllSessions");
        }
    
        public virtual int Logout(string actualUser, string apiKey, string applicationName, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var apiKeyParameter = apiKey != null ?
                new ObjectParameter("ApiKey", apiKey) :
                new ObjectParameter("ApiKey", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Logout", actualUserParameter, apiKeyParameter, applicationNameParameter, returnInt, returnText);
        }
    
        public virtual int AssignUserToAppRole(string actualUser, string employeeID, string roleName, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignUserToAppRole", actualUserParameter, employeeIDParameter, roleNameParameter, returnInt, returnText);
        }
    
        public virtual int AssignUserToReportRole(string actualUser, string employeeID, string roleName, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignUserToReportRole", actualUserParameter, employeeIDParameter, roleNameParameter, returnInt, returnText);
        }
    
        public virtual int RemoveUserFromAppRole(string actualUser, string employeeID, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveUserFromAppRole", actualUserParameter, employeeIDParameter, returnInt, returnText);
        }
    
        public virtual int RemoveUserFromReportRole(string actualUser, string employeeID, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveUserFromReportRole", actualUserParameter, employeeIDParameter, returnInt, returnText);
        }
    
        public virtual int DeleteRequest(string actualUser, Nullable<int> requestID, ObjectParameter returnInt, ObjectParameter returnText, ObjectParameter returnManagerID, ObjectParameter returnEmployeeID)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRequest", actualUserParameter, requestIDParameter, returnInt, returnText, returnManagerID, returnEmployeeID);
        }
    
        public virtual ObjectResult<GetLastCreatedRequestByEmployee_Result> GetLastCreatedRequestByEmployee(string actualUser)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLastCreatedRequestByEmployee_Result>("GetLastCreatedRequestByEmployee", actualUserParameter);
        }
    
        public virtual int CountAllPendingRequests(string employeeID, ObjectParameter approvals, ObjectParameter requests)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountAllPendingRequests", employeeIDParameter, approvals, requests);
        }
    
        public virtual ObjectResult<CumulativeOvertimeForDepartment_Result> CumulativeOvertimeForDepartment(string employeeID, string department, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CumulativeOvertimeForDepartment_Result>("CumulativeOvertimeForDepartment", employeeIDParameter, departmentParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<CumulativeOvertimeForWO_Result> CumulativeOvertimeForWO(string employeeID, string wOName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var wONameParameter = wOName != null ?
                new ObjectParameter("WOName", wOName) :
                new ObjectParameter("WOName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CumulativeOvertimeForWO_Result>("CumulativeOvertimeForWO", employeeIDParameter, wONameParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<Top50Overtime_Result> Top50Overtime(string employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Top50Overtime_Result>("Top50Overtime", employeeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<ProjectsAprrovalsFromHistory_Result> ProjectsAprrovalsFromHistory(string employeeID, string project, Nullable<int> rows, Nullable<int> pages, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var rowsParameter = rows.HasValue ?
                new ObjectParameter("Rows", rows) :
                new ObjectParameter("Rows", typeof(int));
    
            var pagesParameter = pages.HasValue ?
                new ObjectParameter("Pages", pages) :
                new ObjectParameter("Pages", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectsAprrovalsFromHistory_Result>("ProjectsAprrovalsFromHistory", employeeIDParameter, projectParameter, rowsParameter, pagesParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<DataDrivenDepartments_Result> DataDrivenDepartments(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DataDrivenDepartments_Result>("DataDrivenDepartments", employeeIDParameter);
        }
    
        public virtual ObjectResult<DataDrivenProject_Result> DataDrivenProject(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DataDrivenProject_Result>("DataDrivenProject", employeeIDParameter);
        }
    
        public virtual ObjectResult<DataDrivenWorkOrganization_Result> DataDrivenWorkOrganization(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DataDrivenWorkOrganization_Result>("DataDrivenWorkOrganization", employeeIDParameter);
        }
    
        public virtual ObjectResult<GetAllOvertimeReasons_Result> GetAllOvertimeReasons()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllOvertimeReasons_Result>("GetAllOvertimeReasons");
        }
    
        public virtual ObjectResult<string> GetAllProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllProjects");
        }
    }
}
