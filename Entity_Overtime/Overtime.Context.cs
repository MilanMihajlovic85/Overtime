//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entity_Overtime
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OvertimeEntities : DbContext
    {
        public OvertimeEntities()
            : base("name=OvertimeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployeesMaster> EmployeesMasters { get; set; }
        public virtual DbSet<WorkingTable> WorkingTables { get; set; }
        public virtual DbSet<AuthenticationCode> AuthenticationCodes { get; set; }
        public virtual DbSet<DatabaseSetting> DatabaseSettings { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ReportViewRole> ReportViewRoles { get; set; }
        public virtual DbSet<RequestStatu> RequestStatus { get; set; }
        public virtual DbSet<WorkOrganization> WorkOrganizations { get; set; }
        public virtual DbSet<ExternComunicationHandler> ExternComunicationHandlers { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<OvertimeReason> OvertimeReasons { get; set; }
        public virtual DbSet<Messaging> Messagings { get; set; }
        public virtual DbSet<Messaging1> Messaging1 { get; set; }
        public virtual DbSet<WorkingTable1> WorkingTable1 { get; set; }
    
        public virtual int ChangeRequestStatus(Nullable<int> requestID, Nullable<int> requestStatus, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var requestStatusParameter = requestStatus.HasValue ?
                new ObjectParameter("RequestStatus", requestStatus) :
                new ObjectParameter("RequestStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeRequestStatus", requestIDParameter, requestStatusParameter, returnInt, returnText);
        }
    
        public virtual int CreateOverTimeRequest(string requestor_EmployeeID, string requestor_Reason, Nullable<int> requestor_For_WO_Project_ID, Nullable<System.DateTime> requestor_StartTime, Nullable<System.DateTime> requestor_EndTime, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestor_EmployeeIDParameter = requestor_EmployeeID != null ?
                new ObjectParameter("Requestor_EmployeeID", requestor_EmployeeID) :
                new ObjectParameter("Requestor_EmployeeID", typeof(string));
    
            var requestor_ReasonParameter = requestor_Reason != null ?
                new ObjectParameter("Requestor_Reason", requestor_Reason) :
                new ObjectParameter("Requestor_Reason", typeof(string));
    
            var requestor_For_WO_Project_IDParameter = requestor_For_WO_Project_ID.HasValue ?
                new ObjectParameter("Requestor_For_WO_Project_ID", requestor_For_WO_Project_ID) :
                new ObjectParameter("Requestor_For_WO_Project_ID", typeof(int));
    
            var requestor_StartTimeParameter = requestor_StartTime.HasValue ?
                new ObjectParameter("Requestor_StartTime", requestor_StartTime) :
                new ObjectParameter("Requestor_StartTime", typeof(System.DateTime));
    
            var requestor_EndTimeParameter = requestor_EndTime.HasValue ?
                new ObjectParameter("Requestor_EndTime", requestor_EndTime) :
                new ObjectParameter("Requestor_EndTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateOverTimeRequest", requestor_EmployeeIDParameter, requestor_ReasonParameter, requestor_For_WO_Project_IDParameter, requestor_StartTimeParameter, requestor_EndTimeParameter, returnInt, returnText);
        }
    
        public virtual int GenerateMessage(Nullable<int> requestID, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateMessage", requestIDParameter, returnInt, returnText);
        }
    
        public virtual int GenerateMessage_To_Employee(Nullable<int> requestID, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateMessage_To_Employee", requestIDParameter, returnInt, returnText);
        }
    
        public virtual int Login(string actualUser, Nullable<int> loginCode, ObjectParameter loged_ApiKey, ObjectParameter loged_EmployeeName, ObjectParameter loged_EmployeeID, string applicationName, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var loginCodeParameter = loginCode.HasValue ?
                new ObjectParameter("LoginCode", loginCode) :
                new ObjectParameter("LoginCode", typeof(int));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Login", actualUserParameter, loginCodeParameter, loged_ApiKey, loged_EmployeeName, loged_EmployeeID, applicationNameParameter, returnInt, returnText);
        }
    
        public virtual int PreLogin(string actualUser, string employeeID, string applicationName, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PreLogin", actualUserParameter, employeeIDParameter, applicationNameParameter, returnInt, returnText);
        }
    
        public virtual int Send_EMAIL(Nullable<int> requestID, string reciever, string messageText, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var recieverParameter = reciever != null ?
                new ObjectParameter("Reciever", reciever) :
                new ObjectParameter("Reciever", typeof(string));
    
            var messageTextParameter = messageText != null ?
                new ObjectParameter("MessageText", messageText) :
                new ObjectParameter("MessageText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Send_EMAIL", requestIDParameter, recieverParameter, messageTextParameter, returnInt, returnText);
        }
    
        public virtual int Send_SMS(Nullable<int> requestID, string reciever, string messageText, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var recieverParameter = reciever != null ?
                new ObjectParameter("Reciever", reciever) :
                new ObjectParameter("Reciever", typeof(string));
    
            var messageTextParameter = messageText != null ?
                new ObjectParameter("MessageText", messageText) :
                new ObjectParameter("MessageText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Send_SMS", requestIDParameter, recieverParameter, messageTextParameter, returnInt, returnText);
        }
    
        public virtual int SendEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendEmail");
        }
    
        public virtual ObjectResult<PendingApprovalsForMyApprove_Result> PendingApprovalsForMyApprove(string apiKey)
        {
            var apiKeyParameter = apiKey != null ?
                new ObjectParameter("ApiKey", apiKey) :
                new ObjectParameter("ApiKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingApprovalsForMyApprove_Result>("PendingApprovalsForMyApprove", apiKeyParameter);
        }
    
        public virtual ObjectResult<PendingMyOvertimeRequests_Result> PendingMyOvertimeRequests(string apiKey)
        {
            var apiKeyParameter = apiKey != null ?
                new ObjectParameter("ApiKey", apiKey) :
                new ObjectParameter("ApiKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PendingMyOvertimeRequests_Result>("PendingMyOvertimeRequests", apiKeyParameter);
        }
    
        public virtual int ErrorLog_Insert(string errorText, string errorProcedure, Nullable<int> errorScript, string errorUser, string errorNode, string applicationName)
        {
            var errorTextParameter = errorText != null ?
                new ObjectParameter("ErrorText", errorText) :
                new ObjectParameter("ErrorText", typeof(string));
    
            var errorProcedureParameter = errorProcedure != null ?
                new ObjectParameter("ErrorProcedure", errorProcedure) :
                new ObjectParameter("ErrorProcedure", typeof(string));
    
            var errorScriptParameter = errorScript.HasValue ?
                new ObjectParameter("ErrorScript", errorScript) :
                new ObjectParameter("ErrorScript", typeof(int));
    
            var errorUserParameter = errorUser != null ?
                new ObjectParameter("ErrorUser", errorUser) :
                new ObjectParameter("ErrorUser", typeof(string));
    
            var errorNodeParameter = errorNode != null ?
                new ObjectParameter("ErrorNode", errorNode) :
                new ObjectParameter("ErrorNode", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ErrorLog_Insert", errorTextParameter, errorProcedureParameter, errorScriptParameter, errorUserParameter, errorNodeParameter, applicationNameParameter);
        }
    
        public virtual int EventLog_Insert(string eventText, string eventProcedure, Nullable<int> eventScript, string eventUser, string eventNode, string applicationName)
        {
            var eventTextParameter = eventText != null ?
                new ObjectParameter("EventText", eventText) :
                new ObjectParameter("EventText", typeof(string));
    
            var eventProcedureParameter = eventProcedure != null ?
                new ObjectParameter("EventProcedure", eventProcedure) :
                new ObjectParameter("EventProcedure", typeof(string));
    
            var eventScriptParameter = eventScript.HasValue ?
                new ObjectParameter("EventScript", eventScript) :
                new ObjectParameter("EventScript", typeof(int));
    
            var eventUserParameter = eventUser != null ?
                new ObjectParameter("EventUser", eventUser) :
                new ObjectParameter("EventUser", typeof(string));
    
            var eventNodeParameter = eventNode != null ?
                new ObjectParameter("EventNode", eventNode) :
                new ObjectParameter("EventNode", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EventLog_Insert", eventTextParameter, eventProcedureParameter, eventScriptParameter, eventUserParameter, eventNodeParameter, applicationNameParameter);
        }
    
        public virtual ObjectResult<DepartmentAprrovalsFromHistory_Result> DepartmentAprrovalsFromHistory(string employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartmentAprrovalsFromHistory_Result>("DepartmentAprrovalsFromHistory", employeeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<DepartmentAprrovalsFromHistory_ALL_Result> DepartmentAprrovalsFromHistory_ALL(string employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartmentAprrovalsFromHistory_ALL_Result>("DepartmentAprrovalsFromHistory_ALL", employeeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<MyOvertimesRequestsFromHistory_Result> MyOvertimesRequestsFromHistory(string employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MyOvertimesRequestsFromHistory_Result>("MyOvertimesRequestsFromHistory", employeeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<ProjectAprrovalsFromHistory_Result> ProjectAprrovalsFromHistory(string employeeID, string project, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectAprrovalsFromHistory_Result>("ProjectAprrovalsFromHistory", employeeIDParameter, projectParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<ProjectAprrovalsFromHistory_ALL_Result> ProjectAprrovalsFromHistory_ALL(string employeeID, string project, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectAprrovalsFromHistory_ALL_Result>("ProjectAprrovalsFromHistory_ALL", employeeIDParameter, projectParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<WOAprrovalsFromHistory_Result> WOAprrovalsFromHistory(string employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WOAprrovalsFromHistory_Result>("WOAprrovalsFromHistory", employeeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<WOAprrovalsFromHistory_ALL_Result> WOAprrovalsFromHistory_ALL(string employeeID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WOAprrovalsFromHistory_ALL_Result>("WOAprrovalsFromHistory_ALL", employeeIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetAllSessions_Result> GetAllSessions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSessions_Result>("GetAllSessions");
        }
    
        public virtual int Logout(string actualUser, string apiKey, string applicationName, ObjectParameter returnInt, ObjectParameter returnText)
        {
            var actualUserParameter = actualUser != null ?
                new ObjectParameter("ActualUser", actualUser) :
                new ObjectParameter("ActualUser", typeof(string));
    
            var apiKeyParameter = apiKey != null ?
                new ObjectParameter("ApiKey", apiKey) :
                new ObjectParameter("ApiKey", typeof(string));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Logout", actualUserParameter, apiKeyParameter, applicationNameParameter, returnInt, returnText);
        }
    }
}
